{"version":3,"file":"static/js/871.d6c298cf.chunk.js","mappings":"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","sources":["utils/constants.ts","api/request.ts","api/weather/index.ts","redux/weather/actions.ts","redux/weather/selectors.ts","components/NotFound/index.ts","components/NotFound/NotFound.tsx","components/SearchForm/SearchForm.tsx","components/SearchForm/SearchFormContainer.ts","components/SearchForm/index.ts","components/LazyImage/index.ts","components/LazyImage/LazyImage.tsx","components/Forecast/Forecast.tsx","components/Forecast/index.ts","components/Forecast/ForecastBox.tsx","components/Skeleton/index.ts","components/Skeleton/Skeleton.tsx","components/ForeCastLoader/index.ts","components/ForeCastLoader/ForeCastLoader.tsx","components/App/App.tsx","components/App/AppContainer.tsx","components/App/index.ts"],"sourcesContent":["const BASE_URL = process.env.REACT_APP_METAWEATHER_API_URL;\nconst CROSS_DOMAIN = process.env.REACT_APP_CROSS_DOMAIN;\nconst LOCATION_PATH = \"location\";\nconst LOCATION_BY_CITY_PATH = `${LOCATION_PATH}/search?query=`;\nconst IMAGE_PATH = process.env.REACT_APP_IMAGE_PATH;\n\nexport {\n  BASE_URL,\n  CROSS_DOMAIN,\n  LOCATION_PATH,\n  LOCATION_BY_CITY_PATH,\n  IMAGE_PATH,\n};\n","import { CROSS_DOMAIN, BASE_URL } from \"../utils/constants\";\n\nconst request = async (uri?: string, method?: string, body?: any) => {\n  const url = `${CROSS_DOMAIN}/${BASE_URL}/${uri}`;\n  try {\n    const res = await fetch(url, {\n      method,\n      body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const json = await res.json();\n    return json;\n  } catch (error) {\n    if (error) {\n      return error;\n    }\n  }\n};\n\nconst $get = async (uri?: string) => request(uri, \"GET\");\n\nexport { request, $get };\n","import { $get } from \"../request\";\nimport { LocationResponse, LocationWoeResponse } from \"./type\";\nimport { LOCATION_PATH, LOCATION_BY_CITY_PATH } from \"../../utils/constants\";\n\nconst getLocationByCity = async (\n  query: string\n): Promise<LocationResponse[]> => {\n  return $get(`${LOCATION_BY_CITY_PATH}${query}`);\n};\n\nconst getLocationByWoeId = async (\n  woeId: string\n): Promise<LocationWoeResponse> => {\n  return $get(`${LOCATION_PATH}/${woeId}/`);\n};\n\nexport { getLocationByCity, getLocationByWoeId };\n","import {\n  FETCHING_LOCATION_BY_CITY,\n  FETCH_LOCATION_BY_CITY_SUCCESS,\n  FETCH_LOCATION_BY_CITY_SUCCESS_WITH_EMPTY,\n  FETCH_LOCATION_BY_CITY_FAILED,\n  FETCHING_LOCATION_BY_WOEID,\n  FETCH_LOCATION_BY_WOEID_SUCCESS,\n  FETCH_LOCATION_BY_WOEID_FAILED,\n} from \"./types\";\n\nimport { getLocationByCity, getLocationByWoeId } from \"../../api/weather\";\nimport { LocationResponse, LocationWoeResponse } from \"../../api/weather/type\";\n\nconst fetchLocationByWoeId = (woeId: string) => {\n  return async (dispatch) => {\n    dispatch({\n      type: FETCHING_LOCATION_BY_WOEID,\n    });\n    try {\n      const locationWoeRes: LocationWoeResponse = await getLocationByWoeId(\n        woeId\n      );\n      dispatch({\n        type: FETCH_LOCATION_BY_WOEID_SUCCESS,\n        payload: locationWoeRes.consolidated_weather\n          .map(\n            ({\n              applicable_date: dayOfWeek,\n              max_temp: maxTemp,\n              min_temp: minTemp,\n              weather_state_abbr: weatherStateAbbr,\n            }) => ({\n              dayOfWeek,\n              maxTemp,\n              minTemp,\n              weatherStateAbbr,\n            })\n          )\n          .slice(0, 5),\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_LOCATION_BY_WOEID_FAILED,\n        payload: error,\n      });\n    }\n  };\n};\n\nconst fetchLocationByCity = (query: string) => {\n  return async (dispatch) => {\n    dispatch({\n      type: FETCHING_LOCATION_BY_CITY,\n    });\n\n    try {\n      const locationRes: LocationResponse[] = await getLocationByCity(query);\n      if (!locationRes.length) {\n        return dispatch({\n          type: FETCH_LOCATION_BY_CITY_SUCCESS_WITH_EMPTY,\n        });\n      }\n      const woeId = locationRes[0].woeid.toString();\n      dispatch({\n        type: FETCH_LOCATION_BY_CITY_SUCCESS,\n        payload: woeId,\n      });\n      await dispatch(fetchLocationByWoeId(woeId));\n    } catch (error) {\n      dispatch({\n        type: FETCH_LOCATION_BY_CITY_FAILED,\n        payload: error,\n      });\n    }\n  };\n};\n\nexport { fetchLocationByCity, fetchLocationByWoeId };\n","import { key } from \".\";\nimport { WeatherState } from \"./reducer\";\n\nexport const weatherReducer = (state): WeatherState => state[key];\n","import NotFound from \"./NotFound\";\n\nexport default NotFound;\n","import React from \"react\";\nimport \"./NotFound.scss\";\n\ninterface NotFoundProps {\n  message?: string;\n}\nconst DEFAULT_MESSAGE = \"An error occurred\";\n\nconst NotFound: React.FC<NotFoundProps> = ({ message }) => (\n  <div className=\"not-found-text\" role=\"alert\">\n    {message || DEFAULT_MESSAGE}\n  </div>\n);\n\nexport default NotFound;\n","import React, { useState } from \"react\";\nimport NotFound from \"../NotFound\";\nimport \"./SearchForm.scss\";\n\ntype SearchFormProps = {\n  fetchLocationByCity?: any;\n  isError: boolean;\n  errorMessage?: string;\n  isFetching: boolean;\n};\n\nconst SearchForm: React.FC<SearchFormProps> = ({\n  fetchLocationByCity,\n  isError,\n  errorMessage,\n  isFetching,\n}) => {\n  const [location, setLocation] = useState(\"\");\n\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!location) return;\n    await fetchLocationByCity(location);\n  };\n\n  return (\n    <form className=\"search-form\" onSubmit={onSubmit}>\n      <div className=\"input-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search weather for a city\"\n          aria-label=\"Search\"\n          aria-describedby=\"button-search\"\n          value={location}\n          onChange={(e) => setLocation(e.target.value)}\n          required\n          disabled={isFetching}\n        />\n        <button\n          onClick={onSubmit}\n          type=\"submit\"\n          className=\"btn btn-secondary\"\n          disabled={isFetching}\n        >\n          SEARCH\n        </button>\n      </div>\n      {isError && errorMessage && <NotFound message={errorMessage} />}\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import { connect } from \"react-redux\";\nimport { fetchLocationByCity } from \"../../redux/weather/actions\";\nimport { weatherReducer } from \"../../redux/weather/selectors\";\nimport SearchForm from \"./SearchForm\";\n\nexport const mapStateToProps = (state) => ({\n  isError: weatherReducer(state).isError,\n  isFetching: weatherReducer(state).isFetching,\n  errorMessage: weatherReducer(state).errorMessage,\n});\n\nconst mapDispatchToProps = {\n  fetchLocationByCity,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\n","import SearchFormContainer from \"./SearchFormContainer\";\nimport SearchForm from \"./SearchForm\";\n\nexport { SearchForm };\nexport default SearchFormContainer;\n","import LazyImage from \"./LazyImage\";\n\nexport default LazyImage;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport \"./LazyImage.scss\";\n\ninterface LazyImageProps {\n  className?: string;\n  src: string;\n  alt?: string;\n  aspectRatio?: number;\n}\n\nconst LazyImage: React.FC<LazyImageProps> = ({\n  className,\n  src,\n  alt,\n  aspectRatio = 2 / 3,\n}: LazyImageProps) => {\n  const [loaded, setLoaded] = useState(false);\n  const imgRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (imgRef.current && imgRef.current.complete) {\n      setLoaded(true);\n    }\n  }, []);\n\n  const handleOnLoad = () => {\n    setLoaded(true);\n  };\n\n  return (\n    <div className={classNames(\"lazy-image\", className)}>\n      <div style={{ paddingBottom: `${100 / aspectRatio}%` }} />\n      <div\n        className=\"no-lqip\"\n        style={{ backgroundColor: loaded ? \"white\" : \"#eee\" }}\n      />\n      <img\n        loading=\"lazy\"\n        src={src}\n        alt={alt || \"no alt\"}\n        ref={imgRef}\n        onLoad={handleOnLoad}\n        className={classNames(\"source\", loaded && \"loaded\")}\n      />\n    </div>\n  );\n};\n\nexport default LazyImage;\n","import React from \"react\";\nimport moment from \"moment\";\nimport LazyImage from \"../LazyImage\";\nimport { IMAGE_PATH } from \"../../utils/constants\";\nimport \"./Forecast.scss\";\n\nexport type ForecastProps = {\n  dayOfWeek: string;\n  maxTemp: number;\n  minTemp: number;\n  weatherStateAbbr: string;\n};\n\nconst Forecast: React.FC<ForecastProps> = ({\n  dayOfWeek,\n  maxTemp,\n  minTemp,\n  weatherStateAbbr,\n}) => {\n  return (\n    <div className=\"forecast\">\n      <LazyImage\n        aspectRatio={1}\n        src={`${IMAGE_PATH}/${weatherStateAbbr}.svg`}\n      />\n      <div className=\"title\">{moment(dayOfWeek).format(\"dddd\")}</div>\n      <div>{`Max Temp: ${Math.round(maxTemp)}`}&deg;</div>\n      <div>{`Min Temp: ${Math.round(minTemp)}`}&deg;</div>\n    </div>\n  );\n};\n\nexport default Forecast;\n","import Forecast, { ForecastProps } from \"./Forecast\";\nimport ForecastBox from \"./ForecastBox\";\n\nexport { Forecast };\nexport type { ForecastProps };\nexport default ForecastBox;\n","import React from \"react\";\nimport \"./Forecast.scss\";\nimport { ForecastProps, Forecast } from \"../Forecast\";\n\ntype ForeBoxProps = {\n  woeLocations: ForecastProps[];\n};\nconst ForecastBox: React.FC<ForeBoxProps> = ({ woeLocations }) => {\n  if (!woeLocations.length) {\n    return <div>Empty Data</div>;\n  }\n\n  return (\n    <div className=\"forecast-box\">\n      {woeLocations.map((woe) => (\n        <Forecast {...woe} key={woe.dayOfWeek} />\n      ))}\n    </div>\n  );\n};\n\nexport default ForecastBox;\n","import Skeleton from \"./Skeleton\";\n\nexport default Skeleton;\n","import React from \"react\";\nimport \"./Skeleton.scss\";\n\ntype SkeletonProps = {\n  className?: string;\n};\n\nconst Skeleton: React.FC<SkeletonProps> = ({ className, children }) => (\n  <div className={`skeleton ${className || \"\"}`}>{children}</div>\n);\n\nexport default Skeleton;\n","import ForeCastLoader from \"./ForeCastLoader\";\n\nexport default ForeCastLoader;\n","import React from \"react\";\nimport Skeleton from \"../Skeleton\";\nimport \"./ForeCastLoader.scss\";\n\nconst ForeCastLoader: React.FC = () => (\n  <div className=\"forecast-box loader\">\n    {[...Array(5)].map((load, idx) => (\n      <div key={idx} className=\"forecast\">\n        <Skeleton className=\"img\" />\n        <Skeleton />\n        <Skeleton />\n        <Skeleton />\n      </div>\n    ))}\n  </div>\n);\n\nexport default ForeCastLoader;\n","import React from \"react\";\n\nimport SearchForm from \"../SearchForm\";\nimport ForecastBox, { ForecastProps } from \"../Forecast\";\nimport ForeCastLoader from \"../ForeCastLoader\";\nimport \"./App.scss\";\n\ntype AppProps = {\n  isFetching: boolean;\n  isFetched: boolean;\n  woeLocations: ForecastProps[];\n};\n\nconst App: React.FC<AppProps> = ({ isFetching, isFetched, woeLocations }) => {\n  const isShowForeCast = isFetched && woeLocations.length > 0;\n\n  return (\n    <div className=\"weather-app container\">\n      <h1 className=\"mb-4\">\n        {\" \"}\n        <span>Weather</span> Forecast\n      </h1>\n      <div className=\"weather-box\">\n        <SearchForm />\n        {isShowForeCast && <ForecastBox woeLocations={woeLocations} />}\n        {isFetching && <ForeCastLoader />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport { fetchLocationByCity } from \"../../redux/weather/actions\";\nimport { weatherReducer } from \"../../redux/weather/selectors\";\nimport App from \"./App\";\n\nexport const mapStateToProps = (state) => ({\n  ...weatherReducer(state),\n});\n\nconst mapDispatchToProps = {\n  fetchLocationByCity,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import AppContainer from \"./AppContainer\";\nimport App from \"./App\";\n\nexport { App };\nexport default AppContainer;\n"],"names":["LOCATION_PATH","LOCATION_BY_CITY_PATH","request","uri","method","body","url","process","fetch","headers","res","json","$get","getLocationByCity","query","getLocationByWoeId","woeId","fetchLocationByWoeId","dispatch","type","FETCHING_LOCATION_BY_WOEID","locationWoeRes","FETCH_LOCATION_BY_WOEID_SUCCESS","payload","consolidated_weather","map","dayOfWeek","applicable_date","maxTemp","max_temp","minTemp","min_temp","weatherStateAbbr","weather_state_abbr","slice","FETCH_LOCATION_BY_WOEID_FAILED","fetchLocationByCity","FETCHING_LOCATION_BY_CITY","locationRes","length","FETCH_LOCATION_BY_CITY_SUCCESS_WITH_EMPTY","woeid","toString","FETCH_LOCATION_BY_CITY_SUCCESS","FETCH_LOCATION_BY_CITY_FAILED","weatherReducer","state","key","message","className","role","isError","errorMessage","isFetching","useState","location","setLocation","onSubmit","e","preventDefault","placeholder","value","onChange","target","required","disabled","onClick","mapDispatchToProps","connect","SearchForm","src","alt","aspectRatio","loaded","setLoaded","imgRef","useRef","useEffect","current","complete","classNames","style","paddingBottom","backgroundColor","loading","ref","onLoad","moment","format","Math","round","woeLocations","woe","children","Array","load","idx","isFetched","isShowForeCast","App"],"sourceRoot":""}